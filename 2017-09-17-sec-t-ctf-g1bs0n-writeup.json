{"metadata":{"date":"Sep 17, 2017","title":"SEC-T CTF - G1bs0n Writeup","summary":"Hacking the gibson, one byte at the time...","slug":"sec-t-ctf-g1bs0n-writeup","thumbnail":"../images/Untitled-1.png","categories":["CTF"],"tags":["CTF"]},"content":"<h1>G1bs0n - misc 300</h1>\n<h6>@mjdubell - ChalmersCTF</h6>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">Agent</span> Gill called, we have until tomorrow at <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">00</span> UTC to fix some virus problem.\n\n<span class=\"hljs-attribute\">File</span>: G<span class=\"hljs-number\">1</span>bs<span class=\"hljs-number\">0</span>n.tar.gz\n<span class=\"hljs-attribute\">Download</span>: https://github.com/ymgve/ctf-writeups/blob/master/sect<span class=\"hljs-number\">2017</span>/misc<span class=\"hljs-number\">300</span>-g<span class=\"hljs-number\">1</span>bs<span class=\"hljs-number\">0</span>n/gibson.zip\n</code></pre>\n<p>Even though I followed too many rabbit holes, this was a fun challenge to work on. In order to solve this challenge, you would need some basic understanding on how to analyze memory dumps. I solved this challenge with <code>volatility</code> which is a forensic tool for analyzing memory dumps, and it's built with python! Volatility can be found here <a href=\"https://github.com/volatilityfoundation/volatility\">https://github.com/volatilityfoundation/volatility</a></p>\n<p>After downloading the memory dump, I ran <code>strings G1bs0n > strings.txt</code> which I then skimmed through to see what kind of information was present. I could quickly determine that the memory dump belonged to a Windows 7 system. Volatility can also help identifying the system by running <code>vol.py -f G1bs0n imageinfo</code> which returned:</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">vagrant</span>@stretch:~/G<span class=\"hljs-number\">1</span>bson$ vol.py -f G<span class=\"hljs-number\">1</span>bs<span class=\"hljs-number\">0</span>n imageinfo\n<span class=\"hljs-attribute\">Volatility</span> Foundation Volatility Framework <span class=\"hljs-number\">2</span>.<span class=\"hljs-number\">6</span>\n<span class=\"hljs-attribute\">INFO</span>    : volatility.debug    : Determining profile based <span class=\"hljs-literal\">on</span> KDBG search...\n          <span class=\"hljs-attribute\">Suggested</span> Profile(s) : Win<span class=\"hljs-number\">7</span>SP<span class=\"hljs-number\">1</span>x<span class=\"hljs-number\">64</span>, Win<span class=\"hljs-number\">7</span>SP<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">64</span>, Win<span class=\"hljs-number\">2008</span>R<span class=\"hljs-number\">2</span>SP<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">64</span>, Win<span class=\"hljs-number\">2008</span>R<span class=\"hljs-number\">2</span>SP<span class=\"hljs-number\">1</span>x<span class=\"hljs-number\">64</span>_<span class=\"hljs-number\">23418</span>, Win<span class=\"hljs-number\">2008</span>R<span class=\"hljs-number\">2</span>SP<span class=\"hljs-number\">1</span>x<span class=\"hljs-number\">64</span>, Win<span class=\"hljs-number\">7</span>SP<span class=\"hljs-number\">1</span>x<span class=\"hljs-number\">64</span>_<span class=\"hljs-number\">23418</span>\n                     <span class=\"hljs-attribute\">AS</span> Layer<span class=\"hljs-number\">1</span> : WindowsAMD<span class=\"hljs-number\">64</span>PagedMemory (Kernel AS)\n                     <span class=\"hljs-attribute\">AS</span> Layer<span class=\"hljs-number\">2</span> : VMWareAddressSpace (Unnamed AS)\n                     <span class=\"hljs-attribute\">AS</span> Layer<span class=\"hljs-number\">3</span> : FileAddressSpace (/home/vagrant/G<span class=\"hljs-number\">1</span>bson/G<span class=\"hljs-number\">1</span>bs<span class=\"hljs-number\">0</span>n)\n                      <span class=\"hljs-attribute\">PAE</span> type : No PAE\n                           <span class=\"hljs-attribute\">DTB</span> : <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">187000</span>L\n                          <span class=\"hljs-attribute\">KDBG</span> : <span class=\"hljs-number\">0</span>xf<span class=\"hljs-number\">8000284</span>f<span class=\"hljs-number\">0</span>a<span class=\"hljs-number\">0</span>L\n          <span class=\"hljs-attribute\">Number</span> of Processors : <span class=\"hljs-number\">1</span>\n     <span class=\"hljs-attribute\">Image</span> Type (Service Pack) : <span class=\"hljs-number\">1</span>\n                <span class=\"hljs-attribute\">KPCR</span> for CPU <span class=\"hljs-number\">0</span> : <span class=\"hljs-number\">0</span>xfffff<span class=\"hljs-number\">80002850</span>d<span class=\"hljs-number\">00</span>L\n             <span class=\"hljs-attribute\">KUSER_SHARED_DATA</span> : <span class=\"hljs-number\">0</span>xfffff<span class=\"hljs-number\">78000000000</span>L\n           <span class=\"hljs-attribute\">Image</span> date and time : <span class=\"hljs-number\">2017</span>-<span class=\"hljs-number\">09</span>-<span class=\"hljs-number\">03</span> <span class=\"hljs-number\">10</span>:<span class=\"hljs-number\">33</span>:<span class=\"hljs-number\">21</span> UTC+<span class=\"hljs-number\">0000</span>\n     <span class=\"hljs-attribute\">Image</span> local date and time : <span class=\"hljs-number\">2017</span>-<span class=\"hljs-number\">09</span>-<span class=\"hljs-number\">03</span> <span class=\"hljs-number\">12</span>:<span class=\"hljs-number\">33</span>:<span class=\"hljs-number\">21</span> +<span class=\"hljs-number\">0200</span>\n</code></pre>\n<p>Now that the system has been identified, the hunt for the flag can begin!</p>\n<h2>RECON</h2>\n<p>I began by extracting a list of all files present in the dump.</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">vol</span>.py -f G<span class=\"hljs-number\">1</span>bs<span class=\"hljs-number\">0</span>n --profile=Win<span class=\"hljs-number\">7</span>SP<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">64</span> filescan > filescan.txt\n</code></pre>\n<p>From here I could identify some interesting files such as:</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">0x000000003fe14390</span>     <span class=\"hljs-number\">16</span>      <span class=\"hljs-number\">0</span> R--rwd \\Device\\HarddiskVolume<span class=\"hljs-number\">2</span>\\Users\\plauge\\Desktop\\g<span class=\"hljs-number\">4</span>rb<span class=\"hljs-number\">4</span>g<span class=\"hljs-number\">3</span>.txt\n</code></pre>\n<p>Let's extract the contents of that file!</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">vol</span>.py -f G<span class=\"hljs-number\">1</span>bs<span class=\"hljs-number\">0</span>n --profile=Win<span class=\"hljs-number\">7</span>SP<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">64</span> dumpfiles -Q <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">000000003</span>fe<span class=\"hljs-number\">14390</span> --name -D files/\n</code></pre>\n<p>Running <code>strings file.None.0xfffffa8001264bb0.g4rb4g3.txt.dat</code> revealed <code>_X43EUC_3H64YC{GPRF</code>, could this be part of the flag???</p>\n<h2>Don't follow the white rabbit</h2>\n<p>At this point I assumed I had some part of the flag and I followed a few rabbit holes looking for the next part of the flag. But after taking a break, I started looking for files with the keyword <code>gibson</code> which yielded the following result:</p>\n<pre><code class=\"hljs language-stylus\">vagrant@stretch:~/G1bson$ grep gibson strings<span class=\"hljs-selector-class\">.txt</span>\njpg  C:\\T3MP\\gibson<span class=\"hljs-selector-class\">.jpg</span>\ncertutil -decode gibson<span class=\"hljs-selector-class\">.jpg</span> gibson<span class=\"hljs-selector-class\">.zip</span> >nul\n<span class=\"hljs-selector-tag\">del</span> gibson<span class=\"hljs-selector-class\">.zip</span>\n<span class=\"hljs-selector-attr\">[...]</span>\n</code></pre>\n<p>The windows command <code>certutil</code> was used to decode base64 data found in gibson.jpg and the result is gibson.zip. The next step was to search for <code>gibson</code> in filescan.txt to find the above files.</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">vagrant</span>@stretch:~/G<span class=\"hljs-number\">1</span>bson$ grep gibson filescan.txt\n<span class=\"hljs-attribute\">0x000000003ed50dd0</span>     <span class=\"hljs-number\">16</span>      <span class=\"hljs-number\">0</span> -W-r-- \\Device\\HarddiskVolume<span class=\"hljs-number\">2</span>\\T<span class=\"hljs-number\">3</span>MP\\gibson.jpgp\n</code></pre>\n<p>Great, now extract the file like before:</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">vol</span>.py -f G<span class=\"hljs-number\">1</span>bs<span class=\"hljs-number\">0</span>n --profile=Win<span class=\"hljs-number\">7</span>SP<span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">64</span> dumpfiles -Q <span class=\"hljs-number\">0</span>x<span class=\"hljs-number\">000000003</span>ed<span class=\"hljs-number\">50</span>dd<span class=\"hljs-number\">0</span> --name -D files/\n</code></pre>\n<p>Opening the resulting file showed that it contained base64 data, and since we know that certutil was used to decode the data, let's do the same thing:</p>\n<pre><code class=\"hljs language-taggerscript\">C:<span class=\"hljs-symbol\">\\U</span>sers<span class=\"hljs-symbol\">\\s</span>ect<span class=\"hljs-symbol\">\\D</span>ocuments<span class=\"hljs-symbol\">\\V</span>irtual_Machines<span class=\"hljs-symbol\">\\u</span>buntu<span class=\"hljs-symbol\">\\s</span>hare\nÎ» certutil -decode gibson.jpgp gibson.zip\nInput Length = 4096\nOutput Length = 1409\nCertUtil: -decode command completed successfully.\n</code></pre>\n<h2>GET THE FLAG</h2>\n<p>The .zip file contained three files (run.bat, run.ps1, run.reg) with some interesting data, but only one of them contained the next part of the flag:</p>\n<pre><code class=\"hljs language-apache\">[<span class=\"hljs-attribute\">HKEY_LOCAL_MACHINE</span>\\SOFTWARE\\Microsoft\\Internet Explorer\\Security]\n\"<span class=\"hljs-attribute\">Special</span><span class=\"hljs-string\">\"=\"</span>}JGS_<span class=\"hljs-number\">3</span>G<span class=\"hljs-number\">4</span>X_GH<span class=\"hljs-number\">0</span>_<span class=\"hljs-number\">3</span>Z<span class=\"hljs-string\">\"\n</span></code></pre>\n<p>Now we have the flag, but it doesn't look correct: <code>_X43EUC_3H64YC{GPRF}JGS_3G4X_GH0_3Z</code></p>\n<p>Reversing the flag and applying ROT13 returned the flag in the wrong order <code>M3_0UT_K4T3_FTW}SECT{PL46U3_PHR34K_</code>. By moving <code>M3_0UT_K4T3_FTW}</code> to the end of the string we get the correct flag: <code>SECT{PL46U3_PHR34K_M3_0UT_K4T3_FTW}</code></p>"}