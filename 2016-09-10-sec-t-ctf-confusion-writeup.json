{"metadata":{"date":"Sep 10, 2016","title":"SEC-T CTF - Confusion Writeup","template":"post","slug":"sec-t-ctf-confusion-writeup","categories":["CTF"],"tags":["CTF"]},"content":"<p>This time I participated in the <a href=\"https://www.sec-t.org/\">SEC-T CTF</a> event and it was pretty fun! I played with a group of people from my university and we managed to get quite some points. But I didn't manage to solve some of the challenges on time. However this didn't stop from trying to solve them once the event was over!</p>\n<p>One of the challenges I was hooked on was called <strong>Confusion</strong>. The reason why was because it seemed like an \"easy\" challenge but for some reason I couldn't figure it out! The challenge began by downloading the following image:</p>\n<p><img src=\"../images/confusion.png\" alt=\"\"></p>\n<p>I ran <code>binwalk</code> on the file and got the following results:</p>\n<pre><code class=\"hljs language-basic\">DECIMAL       HEXADECIMAL     DESCRIPTION\n--------------------------------------------------------------------------------\n<span class=\"hljs-symbol\">0 </span>            <span class=\"hljs-number\">0</span>x0             PNG image, <span class=\"hljs-number\">422</span> x <span class=\"hljs-number\">92</span>, <span class=\"hljs-number\">8</span>-bit/<span class=\"hljs-keyword\">color</span> RGBA, non-interlaced\n<span class=\"hljs-symbol\">91 </span>           <span class=\"hljs-number\">0</span>x5B            Zlib compressed <span class=\"hljs-keyword\">data</span>, compressed\n<span class=\"hljs-symbol\">2128 </span>         <span class=\"hljs-number\">0</span>x850           GIF image <span class=\"hljs-keyword\">data</span>, version <span class=\"hljs-string\">\"87a\"</span>,\n<span class=\"hljs-symbol\">2259 </span>         <span class=\"hljs-number\">0</span>x8D3           gzip compressed <span class=\"hljs-keyword\">data</span>, from FAT filesystem (MS-DOS, OS/<span class=\"hljs-number\">2</span>, NT), NULL date (<span class=\"hljs-number\">1970</span>-<span class=\"hljs-number\">01</span>-<span class=\"hljs-number\">01</span> <span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>:<span class=\"hljs-number\">00</span>)\n<span class=\"hljs-symbol\">2600 </span>         <span class=\"hljs-number\">0</span>xA28           JPEG image <span class=\"hljs-keyword\">data</span>, EXIF standard\n</code></pre>\n<p>Alright, it looks like we got some hidden files within the image. I ran <code>strings</code> as well and found some interesting stuff:</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-number\">1337.</span><span class=\"hljs-string\">pdf</span>\n<span class=\"hljs-number\">.1337</span>\n<span class=\"hljs-attr\">WYSIWYG:</span> <span class=\"hljs-string\">Does</span> <span class=\"hljs-string\">not</span> <span class=\"hljs-string\">compute,what</span> <span class=\"hljs-string\">would</span> <span class=\"hljs-string\">Phil</span> <span class=\"hljs-string\">Katz</span> <span class=\"hljs-string\">say?</span>\n</code></pre>\n<p>According to google, Phil Katz is the co-creator of the Zip file format, which got me thinking that there has to be an embedded .zip file containing something called 1337. Easy peasy!</p>\n<p>I went to <a href=\"https://en.wikipedia.org/wiki/Zip_(file_format)\">Wikipedia</a> to lookup the magic number used for the zip format. Turns out it can be one of the following:</p>\n<pre><code class=\"hljs language-apache\"><span class=\"hljs-attribute\">PK</span>\\x<span class=\"hljs-number\">03</span>\\x<span class=\"hljs-number\">04</span> , PK\\x<span class=\"hljs-number\">05</span>\\x<span class=\"hljs-number\">06</span> (empty archive), or PK\\x<span class=\"hljs-number\">07</span>\\x<span class=\"hljs-number\">08</span>\n</code></pre>\n<p>I loaded the image file in my HEX editor (Hex Fiend) and begun searching for these magic numbers. I found 1 occurrences of <strong>PK</strong> which was followed by <strong>1337</strong>. Looks like I cracked the case....or not. I tried copying different parts of the data after the first occurrence of <strong>PK</strong> to a new file but no joy.</p>\n<p><img src=\"../images/Screen-Shot-2016-09-10-at-23-28-52.png\" alt=\"\">\n######<strong>Figure 2:</strong> First occurrence of PK</p>\n<p>I was stuck at this point and begun researching more about zip files and found these two resources, <a href=\"http://resources.infosecinstitute.com/steganography-what-your-eyes-dont-see/\">1</a> and <a href=\"https://users.cs.jmu.edu/buchhofp/forensics/formats/pkzip.html\">2</a>. I learned quite a lot about the structure of .zip files. According to <a href=\"http://resources.infosecinstitute.com/steganography-what-your-eyes-dont-see/\">1</a> the .zip file should begin with <strong>PK</strong> and end with <strong>Pk</strong>. However I couldn't find any other <strong>Pk</strong> so obviously I was missing something. I even tried inserting the correct trailer but that didn't work as well.</p>\n<p>After some hours of testing and reading I finally noticed the <code>UEs=</code> which can be seen in figure 2. Initially I thought it was base64 encoded data but didn't really act on that instinct, until later. It actually was base64 encoded data and it turned out to be <strong>PK</strong>! Finally some progress.</p>\n<p>I tried to copy the data between the first occurrence of <strong>PK</strong> and <code>UEs=</code> (PK) but that didn't work either. My next idea was to search for more occurrences of <code>UEs=</code> and lo and behold, I found one.</p>\n<p><img src=\"../images/Screen-Shot-2016-09-10-at-23-57-32.png\" alt=\"\">\n######<strong>Figure 3:</strong> Second occurrence of UEs=</p>\n<p>I decoded the second <code>UEs=</code> found and copied the data between that one and the first <strong>PK</strong> because according to <a href=\"http://resources.infosecinstitute.com/steganography-what-your-eyes-dont-see/\">1</a>, the .zip file should start with <strong>PK</strong> and end with <strong>Pk</strong>. I created a new file with the copied data, saved as file.zip and tried to unzip but no joy! I knew I had to be on the correct path so I continued working with the HEX values for quite some time but I couldn't unzip the file without errors. I started to google how to recover corrupted zip files and found this command:</p>\n<pre><code class=\"hljs language-stata\">$ <span class=\"hljs-keyword\">zip</span> -FF <span class=\"hljs-keyword\">file</span>.<span class=\"hljs-keyword\">zip</span> --<span class=\"hljs-keyword\">out</span> result.<span class=\"hljs-keyword\">zip</span>\n</code></pre>\n<p>I ran the command and it successfully recovered the .zip file and dropped a .pdf file containing the following text:</p>\n<p><img src=\"../images/Screen-Shot-2016-09-11-at-00-14-03.png\" alt=\"\">\n######<strong>Figure 4:</strong> A font consisting of symbols</p>\n<p>I copied the text into my URL bar and BAM, the flag was: <code>sect{I_4m_n0t_3ncrypt3d}</code></p>\n<h2>Conclusion</h2>\n<p>SEC-T CTF was fun and I will most definitely play again in the future. I was a little bit disappointed that I couldn't solve this challenge in time, but hey, next time there won't be any .zip files that can hide from me ;)</p>\n<p>Never doubt your instincts!</p>\n<h4>References</h4>\n<p>[1] <a href=\"http://resources.infosecinstitute.com/steganography-what-your-eyes-dont-see/\">http://resources.infosecinstitute.com/steganography-what-your-eyes-dont-see/</a></p>\n<p>[2] <a href=\"https://users.cs.jmu.edu/buchhofp/forensics/formats/pkzip.html\">https://users.cs.jmu.edu/buchhofp/forensics/formats/pkzip.html</a></p>"}