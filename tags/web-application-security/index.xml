<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Application Security on dubell.io</title><link>https://dubell.io/tags/web-application-security/</link><description>Recent content in Web Application Security on dubell.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Jul 2016 00:00:00 +0000</lastBuildDate><atom:link href="https://dubell.io/tags/web-application-security/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploiting weak Content Security Policy (CSP) rules for fun and profit</title><link>https://dubell.io/www/2016/07/exploiting-weak-content-security-policy-csp-rules-for-fun-and-profit/</link><pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate><guid>https://dubell.io/www/2016/07/exploiting-weak-content-security-policy-csp-rules-for-fun-and-profit/</guid><description>This article is based on my findings during a bug bounty. I was looking for any input bugs which could trigger a XSS but didn&amp;rsquo;t find any until I tested the file upload functionality. Users had the option to drag&amp;amp;drop images into the company&amp;rsquo;s website and place it in their gallery, however by specifying an image like this:
1&amp;lt;img src=&amp;#34;https://hackerdomain.hax/img.php&amp;#34; onerror=&amp;#34;this.src=alert(1)&amp;#34;/&amp;gt; And dropping it into the website trigged an XSS.</description></item></channel></rss>