<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on dubell.io</title><link>https://dubell.io/tags/docker/</link><description>Recent content in Docker on dubell.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Sep 2023 12:25:17 +0200</lastBuildDate><atom:link href="https://dubell.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Supercharge Your Integration Tests with the Power of Docker</title><link>https://dubell.io/supercharge-your-integration-tests-with-the-power-of-docker/</link><pubDate>Tue, 19 Sep 2023 12:25:17 +0200</pubDate><guid>https://dubell.io/supercharge-your-integration-tests-with-the-power-of-docker/</guid><description>In the beginning of my developer career, I learned to use in-memory databases for running integration tests. The in-memory database made it easy to spin up a local database which is often needed for integration testing. However, there are some drawbacks with this approach.
A Clever Illusion Using an in-memory database does not reflect the real database running in production. The local database may look and feel like the real deal, but it&amp;rsquo;s essentially an illusion, and a clever one.</description></item></channel></rss>