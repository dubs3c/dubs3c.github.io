<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Appsec on dubell.io</title><link>https://dubell.io/categories/appsec/</link><description>Recent content in Appsec on dubell.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 29 Oct 2022 14:51:17 +0200</lastBuildDate><atom:link href="https://dubell.io/categories/appsec/index.xml" rel="self" type="application/rss+xml"/><item><title>Measuring attack paths in web applications</title><link>https://dubell.io/measuring-attack-paths-in-web-applications/</link><pubDate>Sat, 29 Oct 2022 14:51:17 +0200</pubDate><guid>https://dubell.io/measuring-attack-paths-in-web-applications/</guid><description>Recently a customer asked us after our penetration test against their web application, the percentage of possible attack paths we had covered. It was a difficult question to answer because, a) the customer wanted us to focus on SQL injection and XSS (long story why) and b) it was a legacy application from 2003 containing a lot of code. The short answer I gave was that since the test was focused towards SQLi and XSS, naturally, some attack paths were not considered.</description></item><item><title>My thoughts on Secure Code Review</title><link>https://dubell.io/my-thoughts-on-secure-code-review/</link><pubDate>Fri, 01 Jul 2022 09:51:17 +0200</pubDate><guid>https://dubell.io/my-thoughts-on-secure-code-review/</guid><description>In this article I would like to share my thoughts, methodologies and techniques on how I perform secure code review. By secure I mean code review with the purpose of finding unknown vulnerabilities. My focus is generally on web applications, but the ideas mentioned below apply to other types of software as well.
1. Understanding üë®‚Äçüè´ Begin by understanding the application. Browse through the code and the application&amp;rsquo;s functionality until you have a clear intuition for what the application is capable of.</description></item><item><title>Python gems to look out for</title><link>https://dubell.io/python-gems-to-look-out-for/</link><pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate><guid>https://dubell.io/python-gems-to-look-out-for/</guid><description>A few weeks ago I was looking into Python specific code patterns that would lead to vulnerabilities. I was surprised when I found a few patterns that I hadn&amp;rsquo;t really thought about, most likely because I never write Python code like the examples I found. Nevertheless, I learned something new and thought I share it here.
Example One Passing an untrusted string to an f-string while passing a dict as an argument to the logger, may give the attacker the possibility to read keys in the dict that should not be readable.</description></item><item><title>Overwriting HttpOnly cookies with Javascript</title><link>https://dubell.io/overwriting-httponly-cookies-with-javascript/</link><pubDate>Mon, 01 Nov 2021 13:13:37 +0000</pubDate><guid>https://dubell.io/overwriting-httponly-cookies-with-javascript/</guid><description>So I got in contact with Sam Anttila on twitter regarding his article about overwriting HttpOnly enabled cookies using Javascript, which should not be possible. I asked him if he had verified if Firefox exhibits the same behavior. He answered yes and the result was negative, but the test was done a long time ago and things could have changed. So I decided to try it out myself, as you should :)</description></item></channel></rss>