<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Appsec on dubell.io</title><link>/categories/appsec/</link><description>Recent content in Appsec on dubell.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 01 Jul 2022 09:51:17 +0200</lastBuildDate><atom:link href="/categories/appsec/index.xml" rel="self" type="application/rss+xml"/><item><title>My thoughts on Secure Code Review</title><link>/www/2022/07/my-thoughts-on-secure-code-review/</link><pubDate>Fri, 01 Jul 2022 09:51:17 +0200</pubDate><guid>/www/2022/07/my-thoughts-on-secure-code-review/</guid><description>This article is going to cover my journey in cyber security, thoughts on secure code review and how to improve your own skills.
I have now worked for four years professionally in the cyber security field as consultant, mostly doing white-box assessments with access to source code. Since I have a developer background, I always approach a project with source code in mind, because to me, source is absolute truth. And from a customer perspective, it&amp;rsquo;s way more worth the money for me to be able to view the source in order to find deeper issues.</description></item><item><title>Python gems to look out for</title><link>/www/2022/06/python-gems-to-look-out-for/</link><pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate><guid>/www/2022/06/python-gems-to-look-out-for/</guid><description>A few weeks ago I was looking into Python specific code patterns that would lead to vulnerabilities. I was surprised when I found a few patterns that I hadn&amp;rsquo;t really thought about, most likely because I never write Python code like the examples I found. Nevertheless, I learned something new and thought I share it here.
Example One Passing an untrusted string to an f-string while passing a dict as an argument to the logger, may give the attacker the possibility to read keys in the dict that should not be readable.</description></item><item><title>Overwriting HttpOnly cookies with Javascript</title><link>/www/2021/11/overwriting-httponly-cookies-with-javascript/</link><pubDate>Mon, 01 Nov 2021 13:13:37 +0000</pubDate><guid>/www/2021/11/overwriting-httponly-cookies-with-javascript/</guid><description>So I got in contact with Sam Anttila on twitter regarding his article about overwriting HttpOnly enabled cookies using Javascript, which should not be possible. I asked him if he had verified if Firefox exhibits the same behavior. He answered yes and the result was negative, but the test was done a long time ago and things could have changed. So I decided to try it out myself, as you should :)</description></item></channel></rss>