<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dubell.io</title><link>/</link><description>Recent content on dubell.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Jun 2022 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Python gems to look out for</title><link>/www/2022-06-29-python-vulnerabilities-to-look-out-for/</link><pubDate>Wed, 29 Jun 2022 00:00:00 +0000</pubDate><guid>/www/2022-06-29-python-vulnerabilities-to-look-out-for/</guid><description>A few weeks ago I was looking into Python specific code patterns that would lead to vulnerabilities. I was surprised when I found a few patterns that I hadn&amp;rsquo;t really thought about, most likely because I never write Python code like the examples I found. Nevertheless, I learned something new and thought I share it here.
Example One Passing an untrusted string to an f-string while passing a dict as an argument to the logger, may give the attacker the possibility to read keys in the dict that should not be readable.</description></item><item><title>Unauthenticated LFI in Appwrite 0.5.0 &lt;= 0.12.1</title><link>/www/unauthenticated-lfi-in-appwrite-0.5.0-through-0.12.1/</link><pubDate>Tue, 22 Feb 2022 13:13:37 +0000</pubDate><guid>/www/unauthenticated-lfi-in-appwrite-0.5.0-through-0.12.1/</guid><description>While exploring cyber space I stumbled upon a project called Appwrite. Looked interesting, started browsing the code. Eventually, I discovered an undisclosed vulnerability in one of the endpoints allowing an attacker to read local files on the system.
The endpoint /.well-known/acme-challenge is vulnerable against local file inclusion which allows an attacker to read arbitrary files on the system. The endpoint contains incorrect checks for verifying that file is located within a defined base path.</description></item><item><title>Overwriting HttpOnly cookies with Javascript</title><link>/www/httponly-cookie-overwrite/</link><pubDate>Mon, 01 Nov 2021 13:13:37 +0000</pubDate><guid>/www/httponly-cookie-overwrite/</guid><description>So I got in contact with Sam Anttila on twitter regarding his article about overwriting HttpOnly enabled cookies using Javascript, which should not be possible. I asked him if he had verified if Firefox exhibits the same behavior. He answered yes and the result was negative, but the test was done a long time ago and things could have changed. So I decided to try it out myself, as you should :)</description></item><item><title>Technical Analysis Of The Necr0 Python Malware</title><link>/www/necr0-malware-analysis/</link><pubDate>Mon, 20 Apr 2020 13:13:37 +0000</pubDate><guid>/www/necr0-malware-analysis/</guid><description>I recently got a hold of a malware sample written in python that dropped crypto currency miners, among other things. It was built with Python2.7 and was heavily obfuscated. I decided to analyse it and try to break it apart to understand it better and its capabilities.
In this article, I will show some parts of the malware and explain its purpose. I will also provide some detection techniques for detecting this specific malware.</description></item><item><title>SLAE 7: Creating your own crypter using golang</title><link>/www/slae-7-creating_custom_crypter/</link><pubDate>Mon, 27 Jan 2020 13:33:37 +0000</pubDate><guid>/www/slae-7-creating_custom_crypter/</guid><description>In this article, we will build a simple crypter for encrypting and decrypting shellcode. I chose to implement the crypter in Go using environmental keys.
I will not spend time implementing a fancy shellcode execution method in this article, only encryption and decryption methods are in scope for now.
Encryption The encryption/decryption process is using AES GCM and a specific file in /etc/ concatenated with the current user logged in as the key.</description></item><item><title>SLAE 6: Creating polymorphic shellcode</title><link>/www/slae-6-polymorphic_shellcode/</link><pubDate>Sun, 26 Jan 2020 13:33:37 +0000</pubDate><guid>/www/slae-6-polymorphic_shellcode/</guid><description>The goal of this article is to create polymorphic verions of three different shellcodes from http://shell-storm.org. Polymorphic shellcode has the ability to mutate its code everytime it runs. The instructions changes while algorithm stays intact. The purpose is to evade signature based detections without manually change the shellcode.
We won&amp;rsquo;t be creating our own polymorphic engine in this article, instead we will manually modify these three shellcodes from shell-storm.org:
Linux/x86 - shutdown -h now Shellcode - 56 bytes Linux/x86 - 40 byte shellcode to flush ipchains for Linux x86 Linux/x86 - Download + chmod + exec - 108 bytes We are not allowed to increase the size more than 50%.</description></item><item><title>SLAE 5: Analyzing shellcode generated by msfvenom</title><link>/www/slae-5-analysing_msfvenom/</link><pubDate>Sat, 25 Jan 2020 13:33:37 +0000</pubDate><guid>/www/slae-5-analysing_msfvenom/</guid><description>In this article, I will analyse three shellcode samples generated by msfvenom, specifically:
linux/x86/read_file linux/x86/adduser linux/x86/shell/reverse_tcp msfvenom --list payloads -a x86 --platform linux Let&amp;rsquo;s see if there is something new we can learn from these samples :)
Analyzing linux/x86/read_file First, we generate the executable like so:
msfvenom -p linux/x86/read_file -a x86 --platform linux PATH=/etc/passwd FD=2 -f elf -o read_file I set the payload options PATH and FD to /etc/passwd and 2.</description></item><item><title>SLAE 4: Custom encoder for bypassing signature based detection</title><link>/www/slae-4-custom_encoder/</link><pubDate>Fri, 24 Jan 2020 13:33:37 +0000</pubDate><guid>/www/slae-4-custom_encoder/</guid><description>Malware detection techniques has improved a lot over the years. Today companies are investing in machine learning methods for detecting malware, which sounds pretty cool if you ask me. However, there is one method that has been used since the first anti-virus software, which is signature based detection.
When disassembling a program you can analyze the assembly instructions in order to understand the program from the lowest level. It&amp;rsquo;s also possible from the assembly code to identify a set of unique instructions that identifies a specific program.</description></item><item><title>SLAE 3: Egg hunting in Linux x86 Assembly</title><link>/www/slae-3-egghunter/</link><pubDate>Wed, 22 Jan 2020 13:33:37 +0000</pubDate><guid>/www/slae-3-egghunter/</guid><description>When writing exploits, you sometimes encounter a situation where your payload is too big, you can&amp;rsquo;t fit your payload inside the buffer. This is where &amp;ldquo;eggs&amp;rdquo; come in to play. The basic idea of egg hunting is to divide the payload in to two parts, part one is the hunter while part two is the hunted (the egg). The hunter is a set of instructions that searches the program&amp;rsquo;s virtual address space for a given pattern (the egg).</description></item><item><title>SLAE 2: Creating a reverse TCP shell in x86 Assembly</title><link>/www/slae-2-reverse_shell/</link><pubDate>Tue, 21 Jan 2020 13:33:37 +0000</pubDate><guid>/www/slae-2-reverse_shell/</guid><description>What is a reverse TCP shell?
A reverse TCP shell is a program that instead of listening for incoming connections, the program will connect to a remote system and provide a local shell. This is useful in situations where the victim system is behind NAT, meaning you can&amp;rsquo;t directly connect to it, instead the server will connect to you. For this reason, reverse TCP shells are usually prefered over bind shells.</description></item><item><title>SLAE 1: Creating a bind shell in x86 Assembly</title><link>/www/slae-1-bind_shell/</link><pubDate>Mon, 20 Jan 2020 13:33:37 +0000</pubDate><guid>/www/slae-1-bind_shell/</guid><description>What is a bind shell?
A Bind shell is simply a program that listens for incoming connections. When a connection is made, a local shell is redirected to the newly created connection, thereby giving access to the local machine. Bind shells are usually created for backdoor access, although they could also be used for legitimate purposes, e.g. system administration.
ok, nuff said, let&amp;rsquo;s boogie Our program will follow these steps:</description></item><item><title>Hello World</title><link>/www/hello-world/</link><pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate><guid>/www/hello-world/</guid><description>Hello and welcome to Infected-Database! Here you will find articles, information, code and much more relating to hacking.
I hope you like the site&amp;rsquo;s esthetics, I spent a lot of time on it :)</description></item><item><title>Hack The Box - Olympus Writeup</title><link>/www/htb-olympus-writeup/</link><pubDate>Thu, 15 Aug 2019 00:00:00 +0000</pubDate><guid>/www/htb-olympus-writeup/</guid><description>I begun by scanning the box to find some interesting ports.
PORT STATE SERVICE VERSION
22/tcp filtered ssh
53/tcp open domain (unknown banner: Bind)
80/tcp open http Apache httpd
2222/tcp open ssh (protocol 2.0) Port 80 was open so I visited the site and found a picture of the almighty God Zeus. I checked the response headers in the developer console and noticed the xdebug variable. According to my google fu, it&amp;rsquo;s a PHP debugger which among other things, can be used to debug remote PHP applications.</description></item><item><title>My OSCP Review</title><link>/www/my-oscp-review/</link><pubDate>Sun, 20 Jan 2019 00:00:00 +0000</pubDate><guid>/www/my-oscp-review/</guid><description>In this blog post I&amp;rsquo;ll write about my experience taking the OSCP certification as well as some recommendations for people wanting to take the exam.
I got access to the OSCP lab network 2019-09-09 and lost access 2019-12-08. As you can see I chose 90 days of lab time. The number one thing I read in all the OSCP reviews out there was that do not underestimate the amount of time it takes to be successful in the lab network.</description></item><item><title>SEC-T CTF - G1bs0n Writeup</title><link>/www/sec-t-ctf-g1bs0n-writeup/</link><pubDate>Sun, 17 Sep 2017 00:00:00 +0000</pubDate><guid>/www/sec-t-ctf-g1bs0n-writeup/</guid><description>Hacking the gibson, one byte at the time&amp;hellip;</description></item><item><title>UIUCTF - Are we out of the woods yet? Reversing 350p</title><link>/www/uiuctf-are-we-out-of-the-woods-yet-2/</link><pubDate>Sun, 30 Apr 2017 00:00:00 +0000</pubDate><guid>/www/uiuctf-are-we-out-of-the-woods-yet-2/</guid><description>It looks like this python script was run through a custom packer. It&amp;#39;s just Python*, which means it must be easy to reverse, right?
*v3.6.1:69c0db5
https://www.youtube.com/watch?v=y8qQsXpcZXA This was fun little challenge that our team (https://chalmersctf.se) solved together. You are presented with the file packed.py that contains the following code:
import marshal, zlib, base64, itertools
def xor_strings(_left, _k):
out = b&amp;#39;&amp;#39;
for l, r in zip(_left, itertools.cycle(_k)):
out += (l ^ ord(r)).</description></item><item><title>VolgaCTF - Bloody Feedback writeup</title><link>/www/volgactf-bloody-feedback-writeup/</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>/www/volgactf-bloody-feedback-writeup/</guid><description>Bloody Feedback
Send your feedback at bloody-feedback.quals.2017.volgactf.ru
DO. NOT. USE. SQLMAP
Otherwise your IP will be banned The challenge basically has two functions, 1) Send feedback and 2) view the status of the sent feedback. There is also page that cotains &amp;ldquo;Top Messages&amp;rdquo; which is the feedback people send in. When you send feedback you get a token back which you can use to see if the feedback has been processed or not.</description></item><item><title>VolgaCTF - Share Point writeup</title><link>/www/volgactf-share-point-writeup/</link><pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate><guid>/www/volgactf-share-point-writeup/</guid><description>Share Point
Look! I wrote a good service for sharing your files with your friends, enjoy)
share-point.quals.2017.volgactf.ru The challenge begun by signing in to the control panel by simply entering random account details. Once logged in you had the ability to upload files and share them with an other user. Since the site only had one functionality, uploading files, I assumed the goal had to be to upload a web shell and find the flag on the file system.</description></item><item><title>Chalmers CTF</title><link>/www/chalmers-ctf/</link><pubDate>Wed, 01 Feb 2017 00:00:00 +0000</pubDate><guid>/www/chalmers-ctf/</guid><description>Hey, long time since last post, been busy with university and starting Chalmers very first CTF team: Chalmers CTF!!
Check out our website for information: https://chalmersctf.se</description></item><item><title>SEC-T CTF - Confusion Writeup</title><link>/www/sec-t-ctf-confusion-writeup/</link><pubDate>Sat, 10 Sep 2016 00:00:00 +0000</pubDate><guid>/www/sec-t-ctf-confusion-writeup/</guid><description>This time I participated in the SEC-T CTF event and it was pretty fun! I played with a group of people from my university and we managed to get quite some points. But I didn&amp;rsquo;t manage to solve some of the challenges on time. However this didn&amp;rsquo;t stop from trying to solve them once the event was over!
One of the challenges I was hooked on was called Confusion. The reason why was because it seemed like an &amp;ldquo;easy&amp;rdquo; challenge but for some reason I couldn&amp;rsquo;t figure it out!</description></item><item><title>Exploiting weak Content Security Policy (CSP) rules for fun and profit</title><link>/www/exploiting-weak-content-security-policy-csp-rules-for-fun-and-profit/</link><pubDate>Thu, 21 Jul 2016 00:00:00 +0000</pubDate><guid>/www/exploiting-weak-content-security-policy-csp-rules-for-fun-and-profit/</guid><description>This article is based on my findings during a bug bounty. I was looking for any input bugs which could trigger a XSS but didn&amp;rsquo;t find any until I tested the file upload functionality. Users had the option to drag&amp;amp;drop images into the company&amp;rsquo;s website and place it in their gallery, however by specifying an image like this:
1 &amp;lt;img src=&amp;#34;https://hackerdomain.hax/img.php&amp;#34; onerror=&amp;#34;this.src=alert(1)&amp;#34;/&amp;gt; And dropping it into the website trigged an XSS.</description></item><item><title>Creating SYN flood attacks with Python</title><link>/www/creating-syn-flood-attacks-with-python/</link><pubDate>Wed, 22 Jun 2016 00:00:00 +0000</pubDate><guid>/www/creating-syn-flood-attacks-with-python/</guid><description>Today it&amp;rsquo;s very easy for people to download tools that overwhelm computer systems (denial of service) in order to take them offline. There are different types of attacks that can be used to create a denial of service attack, one of them is the SYN flood attack which this article will cover. I will also show how to develop your own SYN flooder and some protection mitigations.
What is a SYN flood attack?</description></item><item><title>Monitoring your server with Monit</title><link>/www/monitoring-your-server-with-monit/</link><pubDate>Sun, 12 Jun 2016 00:00:00 +0000</pubDate><guid>/www/monitoring-your-server-with-monit/</guid><description>I run a couple of services on my server, some of them are web, teamspeak, irc and an openvpn server. I need to be notified if any of these services becomes unresponsive for some reason. This is where Monit comes in.
What is Monit? Monit is a small Open Source utility for managing and monitoring Unix systems. Monit conducts automatic maintenance and repair and can execute meaningful causal actions in error situations.</description></item><item><title>Securityfest CTF - Defacer Challenge Writeup</title><link>/www/securityfest-ctf-defacer-challenge-writeup/</link><pubDate>Wed, 08 Jun 2016 00:00:00 +0000</pubDate><guid>/www/securityfest-ctf-defacer-challenge-writeup/</guid><description>I actually learned something entirely new on this challenge, I decided I had to do a writeup to share my findings.
If you read my previous Securityfest CTF writeup you perhaps know that these challenges were from securityfest held in Sweden, which I attended. I did not solve this particular challenge on time in order to win any prizes, but that didn&amp;rsquo;t stop me from trying to solve it.
The challenge is to get the flag by defacing this website http://alienzon.</description></item><item><title>Securityfest CTF - Coresec challenge writeup</title><link>/www/securityfest-ctf-coresec-challenge-writeup/</link><pubDate>Mon, 06 Jun 2016 00:00:00 +0000</pubDate><guid>/www/securityfest-ctf-coresec-challenge-writeup/</guid><description>This challenge was produced by Coresec Systems and was released during Securityfest. I would liked to have spent more time on it during the event but couldn&amp;rsquo;t really find any time for it. Now the event is over and first year of university is completed, I decided to try to finish the challenge. It was quite tricky at some points but now when I think about it in hindsight, the challenge itself was actually fairly simple.</description></item><item><title>Using Amazon S3 for your static site? One thing to keep in mind</title><link>/www/using-amazon-s3-for-your-static-site-theres-one-thing-to-keep-in-mind-2/</link><pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate><guid>/www/using-amazon-s3-for-your-static-site-theres-one-thing-to-keep-in-mind-2/</guid><description>Amazon is a great service for hosting your static website. The way it works is by creating a S3 bucket with the name of your website, uploading your files to the bucket and changing the permissions so that the bucket can be read by the internet.
So long as your domain points to this bucket, you are all good. However, as you may have realized, if you delete this bucket your website will display an error saying something like:</description></item><item><title>Basics of netstat</title><link>/www/disecting-netstat/</link><pubDate>Tue, 15 Sep 2015 00:00:00 +0000</pubDate><guid>/www/disecting-netstat/</guid><description>Netstat is a network tool available in most versions of Windwos, Mac OS X and Linux. You can use Netstat to view network information and statistics about the network you are currently connected to.
You could view information about incoming/outgoing connections, routing table, protocol statistics and interfaces.
On linux netstat has been deprecated, the command ss should be used instead. The difference between the two is that ss can display more information about TCP and connection states.</description></item><item><title>LogRhythm's Blackhat challenge - Write up</title><link>/www/logrhythms-blackhat-challenge-write-up/</link><pubDate>Sat, 08 Aug 2015 00:00:00 +0000</pubDate><guid>/www/logrhythms-blackhat-challenge-write-up/</guid><description>For Blackhat 2015, LogRhythm Labs had a forensics contest for analyzing a .pcap file and finding the secret missile launch code. Find the password and enter the contest to win one of these:
I really wanted to win this!
Analyzing the PCAP with WireShark I downloaded the .pcap file and loaded it into wireshark. I begun by checking the Protocol Hierarchy under Statistics to get a view on the protocols used.</description></item><item><title>Alien: Isolation</title><link>/www/alien-isolation/</link><pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate><guid>/www/alien-isolation/</guid><description>I bought this game during the summer sale 2015, it had a 75% discount and lots of positive reviews. I told my girlfriend that we should play it together so she can experience different types of games rather than playing candy crush all day&amp;hellip;
Anyway, the first levels aren&amp;rsquo;t that bad, you start out combating other stranded humans on board one of the ships. A few &amp;ldquo;holy shit&amp;rdquo; here and there but nothing too scary.</description></item><item><title>Digital Steganography</title><link>/www/steganography/</link><pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate><guid>/www/steganography/</guid><description>There are many ways to conceal a message from untrusted entities, encryption is the far most used method for making sure no one but the intended receiver can read the message. However, there is an other method not widely used today and that is Steganography. In historical times people hid secret messages in all kinds of places where guards for example wouldn&amp;rsquo;t look. I remember reading about a method where a &amp;ldquo;king&amp;rdquo; would have one his messengers shave their head and then they would write the message on the head and wait for the hair to grow back.</description></item><item><title>Dashing Dashboard</title><link>/www/dashing-dashboard/</link><pubDate>Tue, 24 Feb 2015 00:00:00 +0000</pubDate><guid>/www/dashing-dashboard/</guid><description>(Note: Not my dashboard above)
Not long ago I set up a dashboard for our office to show statistics about sales and such. The software we decided to use was Dashing.io. Dashing is a Sinatra based framework written in ruby that lets you build beautiful dashboards.
I had no previous experience with ruby but it went well, as it was mostly syntax that differed from what I was used to.</description></item><item><title>No Such Agency</title><link>/www/no-such-agency/</link><pubDate>Wed, 18 Feb 2015 00:00:00 +0000</pubDate><guid>/www/no-such-agency/</guid><description>Thoughts on the NSA leaks and what it means for the world</description></item></channel></rss>