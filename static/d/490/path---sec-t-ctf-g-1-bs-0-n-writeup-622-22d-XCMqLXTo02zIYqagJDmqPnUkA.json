{"data":{"markdownRemark":{"html":"<h1 id=\"g1bs0n---misc-300\"><a href=\"#g1bs0n---misc-300\" aria-label=\"g1bs0n   misc 300 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>G1bs0n - misc 300</h1>\n<h6 id=\"mjdubell---chalmersctf\"><a href=\"#mjdubell---chalmersctf\" aria-label=\"mjdubell   chalmersctf permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@mjdubell - ChalmersCTF</h6>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Agent Gill called, we have until tomorrow at 15:00 UTC to fix some virus problem.\n\nFile: G1bs0n.tar.gz\nDownload: https://github.com/ymgve/ctf-writeups/blob/master/sect2017/misc300-g1bs0n/gibson.zip</code></pre></div>\n<p>Even though I followed too many rabbit holes, this was a fun challenge to work on. In order to solve this challenge, you would need some basic understanding on how to analyze memory dumps. I solved this challenge with <code class=\"language-text\">volatility</code> which is a forensic tool for analyzing memory dumps, and it's built with python! Volatility can be found here <a href=\"https://github.com/volatilityfoundation/volatility\">https://github.com/volatilityfoundation/volatility</a></p>\n<p>After downloading the memory dump, I ran <code class=\"language-text\">strings G1bs0n &gt; strings.txt</code> which I then skimmed through to see what kind of information was present. I could quickly determine that the memory dump belonged to a Windows 7 system. Volatility can also help identifying the system by running <code class=\"language-text\">vol.py -f G1bs0n imageinfo</code> which returned:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vagrant@stretch:~/G1bson$ vol.py -f G1bs0n imageinfo\nVolatility Foundation Volatility Framework 2.6\nINFO    : volatility.debug    : Determining profile based on KDBG search...\n          Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_23418\n                     AS Layer1 : WindowsAMD64PagedMemory (Kernel AS)\n                     AS Layer2 : VMWareAddressSpace (Unnamed AS)\n                     AS Layer3 : FileAddressSpace (/home/vagrant/G1bson/G1bs0n)\n                      PAE type : No PAE\n                           DTB : 0x187000L\n                          KDBG : 0xf8000284f0a0L\n          Number of Processors : 1\n     Image Type (Service Pack) : 1\n                KPCR for CPU 0 : 0xfffff80002850d00L\n             KUSER_SHARED_DATA : 0xfffff78000000000L\n           Image date and time : 2017-09-03 10:33:21 UTC+0000\n     Image local date and time : 2017-09-03 12:33:21 +0200</code></pre></div>\n<p>Now that the system has been identified, the hunt for the flag can begin!</p>\n<h2 id=\"recon\"><a href=\"#recon\" aria-label=\"recon permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RECON</h2>\n<p>I began by extracting a list of all files present in the dump.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vol.py -f G1bs0n --profile=Win7SP0x64 filescan &gt; filescan.txt</code></pre></div>\n<p>From here I could identify some interesting files such as:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0x000000003fe14390     16      0 R--rwd \\Device\\HarddiskVolume2\\Users\\plauge\\Desktop\\g4rb4g3.txt</code></pre></div>\n<p>Let's extract the contents of that file!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vol.py -f G1bs0n --profile=Win7SP0x64 dumpfiles -Q 0x000000003fe14390 --name -D files/</code></pre></div>\n<p>Running <code class=\"language-text\">strings file.None.0xfffffa8001264bb0.g4rb4g3.txt.dat</code> revealed <code class=\"language-text\">_X43EUC_3H64YC{GPRF</code>, could this be part of the flag???</p>\n<h2 id=\"dont-follow-the-white-rabbit\"><a href=\"#dont-follow-the-white-rabbit\" aria-label=\"dont follow the white rabbit permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Don't follow the white rabbit</h2>\n<p>At this point I assumed I had some part of the flag and I followed a few rabbit holes looking for the next part of the flag. But after taking a break, I started looking for files with the keyword <code class=\"language-text\">gibson</code> which yielded the following result:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vagrant@stretch:~/G1bson$ grep gibson strings.txt\njpg  C:\\T3MP\\gibson.jpg\ncertutil -decode gibson.jpg gibson.zip &gt;nul\ndel gibson.zip\n[...]</code></pre></div>\n<p>The windows command <code class=\"language-text\">certutil</code> was used to decode base64 data found in gibson.jpg and the result is gibson.zip. The next step was to search for <code class=\"language-text\">gibson</code> in filescan.txt to find the above files.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vagrant@stretch:~/G1bson$ grep gibson filescan.txt\n0x000000003ed50dd0     16      0 -W-r-- \\Device\\HarddiskVolume2\\T3MP\\gibson.jpgp</code></pre></div>\n<p>Great, now extract the file like before:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">vol.py -f G1bs0n --profile=Win7SP0x64 dumpfiles -Q 0x000000003ed50dd0 --name -D files/</code></pre></div>\n<p>Opening the resulting file showed that it contained base64 data, and since we know that certutil was used to decode the data, let's do the same thing:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">C:\\Users\\sect\\Documents\\Virtual_Machines\\ubuntu\\share\nλ certutil -decode gibson.jpgp gibson.zip\nInput Length = 4096\nOutput Length = 1409\nCertUtil: -decode command completed successfully.</code></pre></div>\n<h2 id=\"get-the-flag\"><a href=\"#get-the-flag\" aria-label=\"get the flag permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GET THE FLAG</h2>\n<p>The .zip file contained three files (run.bat, run.ps1, run.reg) with some interesting data, but only one of them contained the next part of the flag:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Internet Explorer\\Security]\n&quot;Special&quot;=&quot;}JGS_3G4X_GH0_3Z&quot;</code></pre></div>\n<p>Now we have the flag, but it doesn't look correct: <code class=\"language-text\">_X43EUC_3H64YC{GPRF}JGS_3G4X_GH0_3Z</code></p>\n<p>Reversing the flag and applying ROT13 returned the flag in the wrong order <code class=\"language-text\">M3_0UT_K4T3_FTW}SECT{PL46U3_PHR34K_</code>. By moving <code class=\"language-text\">M3_0UT_K4T3_FTW}</code> to the end of the string we get the correct flag: <code class=\"language-text\">SECT{PL46U3_PHR34K_M3_0UT_K4T3_FTW}</code></p>","timeToRead":4,"excerpt":"G1bs0n - misc 300 @mjdubell - ChalmersCTF Even though I followed too many rabbit holes, this was a fun challenge to work on. In order to…","frontmatter":{"title":"SEC-T CTF - G1bs0n Writeup","slug":"sec-t-ctf-g1bs0n-writeup","date":"2017-09-17T00:00:00.000Z","categories":["CTF Writeup"],"tags":["CTF Writeup"],"template":"post"},"fields":{"nextTitle":"UIUCTF - Are we out of the woods yet? Reversing 350p","nextSlug":"/uiuctf-are-we-out-of-the-woods-yet-2/","prevTitle":"My OSCP Review","prevSlug":"/my-oscp-review/","slug":"/sec-t-ctf-g1bs0n-writeup/","date":"2017-09-17T00:00:00.000Z"}}},"pageContext":{"slug":"/sec-t-ctf-g1bs0n-writeup/"}}