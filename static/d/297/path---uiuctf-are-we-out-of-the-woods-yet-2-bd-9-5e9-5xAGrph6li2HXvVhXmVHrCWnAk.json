{"data":{"markdownRemark":{"html":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">It looks like this python script was run through a custom packer. It&#39;s just Python*, which means it must be easy to reverse, right?\n\n*v3.6.1:69c0db5\n\nhttps://www.youtube.com/watch?v=y8qQsXpcZXA</code></pre></div>\n<p>This was fun little challenge that our team (<a href=\"https://chalmersctf.se\">https://chalmersctf.se</a>) solved together. You are presented with the file <code class=\"language-text\">packed.py</code> that contains the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import marshal, zlib, base64, itertools\ndef xor_strings(_left, _k):\n    out = b&#39;&#39;\n    for l, r in zip(_left, itertools.cycle(_k)):\n        out += (l ^ ord(r)).to_bytes(1, byteorder=&#39;big&#39;)\n    return out\n\ndef YET_eval_code(p1, p2):\n    YET_code = marshal.loads(zlib.decompress(xor_strings(base64.b64decode(p2), p1)))\n    eval(YET_code)\n\nYET_eval_code(&quot;YET&quot;, b&#39;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&#39;)</code></pre></div>\n<p>We could quickly deduce that there was an embedded python program encoded with base64. In order to reveal the program we decompiled <code class=\"language-text\">YET_code</code> variable with <a href=\"https://docs.python.org/3/library/dis.html\" title=\"Disassembler for Python bytecode\">dis</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import dis\nprint(dis.disassemble(YET_code))</code></pre></div>\n<p>This revealed more embedded data:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1           0 LOAD_CONST               0 (0)\n            2 LOAD_CONST               1 (None)\n            4 IMPORT_NAME              0 (marshal)\n            6 STORE_NAME               0 (marshal)\n            8 LOAD_CONST               0 (0)\n           10 LOAD_CONST               1 (None)\n           12 IMPORT_NAME              1 (zlib)\n           14 STORE_NAME               1 (zlib)\n           16 LOAD_CONST               0 (0)\n           18 LOAD_CONST               1 (None)\n           20 IMPORT_NAME              2 (base64)\n           22 STORE_NAME               2 (base64)\n           24 LOAD_CONST               0 (0)\n           26 LOAD_CONST               1 (None)\n           28 IMPORT_NAME              3 (itertools)\n           30 STORE_NAME               3 (itertools)\n\n2          32 LOAD_CONST               2 (&lt;code object xor_strings at 0x10f9fbf60, file &quot;YETpacked&quot;, line 2&gt;)\n           34 LOAD_CONST               3 (&#39;xor_strings&#39;)\n           36 MAKE_FUNCTION            0\n           38 STORE_NAME               4 (xor_strings)\n\n8          40 LOAD_CONST               4 (&lt;code object CLEAR_eval_code at 0x10fa38930, file &quot;YETpacked&quot;, line 8&gt;)\n           42 LOAD_CONST               5 (&#39;CLEAR_eval_code&#39;)\n           44 MAKE_FUNCTION            0\n           46 STORE_NAME               5 (CLEAR_eval_code)\n\n12          48 LOAD_NAME                5 (CLEAR_eval_code)\n           50 LOAD_CONST               6 (&#39;CLEAR&#39;)\n           52 LOAD_CONST               7 (b&#39;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&#39;)\n           54 CALL_FUNCTION            2\n           56 POP_TOP\n           58 LOAD_CONST               1 (None)\n           60 RETURN_VALUE\nNone</code></pre></div>\n<p>By substituting the <code class=\"language-text\">YET_eval_code</code> function call with the key <code class=\"language-text\">CLEAR</code> and with the above base64 encoded data, we get an other embedded python program. This process continues 3 more times until we reach the last and final program. This is how it looks like disassembled:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1           0 LOAD_CONST               0 (1338)\n            2 STORE_NAME               0 (x0)\n\n2           4 LOAD_CONST               1 (413)\n            6 STORE_NAME               1 (x1)\n\n3           8 LOAD_CONST               2 (3.5699)\n           10 STORE_NAME               2 (r)\n\n4          12 LOAD_NAME                0 (x0)\n           14 STORE_NAME               3 (xn)\n\n5          16 LOAD_NAME                1 (x1)\n           18 STORE_NAME               4 (xk)\n\n7          20 LOAD_CONST               3 (&#39;&#39;)\n           22 STORE_NAME               5 (accumulated)\n\n9          24 LOAD_NAME                6 (input)\n           26 LOAD_CONST               4 (&#39;I N P U T: &#39;)\n           28 CALL_FUNCTION            1\n           30 STORE_NAME               7 (user)\n\n10          32 SETUP_EXCEPT            14 (to 48)\n\n11          34 LOAD_NAME                8 (bytes)\n           36 LOAD_ATTR                9 (fromhex)\n           38 LOAD_NAME                7 (user)\n           40 CALL_FUNCTION            1\n           42 STORE_NAME               7 (user)\n           44 POP_BLOCK\n           46 JUMP_FORWARD            36 (to 84)\n\n12     &gt;&gt;   48 DUP_TOP\n           50 LOAD_NAME               10 (ValueError)\n           52 COMPARE_OP              10 (exception match)\n           54 POP_JUMP_IF_FALSE       82\n           56 POP_TOP\n           58 POP_TOP\n           60 POP_TOP\n\n13          62 LOAD_NAME               11 (print)\n           64 LOAD_CONST               5 (&#39;Non-hex byte entered!&#39;)\n           66 CALL_FUNCTION            1\n           68 POP_TOP\n\n14          70 LOAD_NAME               12 (exit)\n           72 LOAD_CONST              14 (-1)\n           74 CALL_FUNCTION            1\n           76 POP_TOP\n           78 POP_EXCEPT\n           80 JUMP_FORWARD             2 (to 84)\n      &gt;&gt;   82 END_FINALLY\n\n15     &gt;&gt;   84 LOAD_CONST               7 (b&#39;\\x8b*&lt;LH~\\xdc\\xc4\\xfc\\xad\\xff9\\xe8h\\x8d^\\xf2\\xc3\\xa7\\xc9&amp;\\x8f \\xeaE_\\xb0T\\x05\\xe5\\xff\\x9cD\\x9e\\x84\\x13k\\x0f~\\xb5\\x9cUm\\x08\\\\&#39;)\n           86 STORE_NAME              13 (flag)\n\n16          88 SETUP_LOOP             152 (to 242)\n           90 LOAD_NAME               14 (zip)\n           92 LOAD_NAME               13 (flag)\n           94 LOAD_NAME                7 (user)\n           96 CALL_FUNCTION            2\n           98 GET_ITER\n      &gt;&gt;  100 FOR_ITER               138 (to 240)\n          102 UNPACK_SEQUENCE          2\n          104 STORE_NAME              15 (flagchar)\n          106 STORE_NAME              16 (userchar)\n\n17         108 LOAD_NAME                2 (r)\n          110 LOAD_NAME                3 (xn)\n          112 BINARY_MULTIPLY\n          114 LOAD_CONST               6 (1)\n          116 LOAD_NAME                3 (xn)\n          118 BINARY_SUBTRACT\n          120 BINARY_MULTIPLY\n          122 LOAD_NAME                0 (x0)\n          124 BINARY_MODULO\n          126 STORE_NAME               3 (xn)\n\n18         128 LOAD_NAME               17 (int)\n          130 LOAD_NAME                3 (xn)\n          132 LOAD_CONST              15 (100)\n          134 BINARY_MULTIPLY\n          136 CALL_FUNCTION            1\n          138 LOAD_CONST              10 (255)\n          140 BINARY_MODULO\n          142 STORE_NAME               3 (xn)\n\n20         144 LOAD_NAME                2 (r)\n          146 LOAD_NAME                4 (xk)\n          148 BINARY_MULTIPLY\n          150 LOAD_CONST               6 (1)\n          152 LOAD_NAME                4 (xk)\n          154 BINARY_SUBTRACT\n          156 BINARY_MULTIPLY\n          158 LOAD_NAME                1 (x1)\n          160 BINARY_MODULO\n          162 STORE_NAME               4 (xk)\n\n21         164 LOAD_NAME               17 (int)\n          166 LOAD_NAME                4 (xk)\n          168 LOAD_CONST              16 (100)\n          170 BINARY_MULTIPLY\n          172 CALL_FUNCTION            1\n          174 LOAD_CONST              10 (255)\n          176 BINARY_MODULO\n          178 STORE_NAME               4 (xk)\n\n23         180 LOAD_NAME               18 (chr)\n          182 LOAD_NAME                3 (xn)\n          184 LOAD_NAME               15 (flagchar)\n          186 BINARY_XOR\n          188 CALL_FUNCTION            1\n          190 STORE_NAME              19 (flagbyte)\n\n24         192 LOAD_NAME               18 (chr)\n          194 LOAD_NAME                4 (xk)\n          196 LOAD_NAME               16 (userchar)\n          198 BINARY_XOR\n          200 CALL_FUNCTION            1\n          202 STORE_NAME              20 (userbyte)\n\n26         204 LOAD_NAME               19 (flagbyte)\n          206 LOAD_NAME               20 (userbyte)\n          208 COMPARE_OP               3 (!=)\n          210 POP_JUMP_IF_FALSE      230\n\n27         212 LOAD_NAME               11 (print)\n          214 LOAD_CONST              11 (&#39;Still in the woods&#39;)\n          216 CALL_FUNCTION            1\n          218 POP_TOP\n\n28         220 LOAD_NAME               12 (exit)\n          222 LOAD_CONST              17 (-1)\n          224 CALL_FUNCTION            1\n          226 POP_TOP\n          228 JUMP_ABSOLUTE          100\n\n30     &gt;&gt;  230 LOAD_NAME                5 (accumulated)\n          232 LOAD_NAME               20 (userbyte)\n          234 INPLACE_ADD\n          236 STORE_NAME               5 (accumulated)\n          238 JUMP_ABSOLUTE          100\n      &gt;&gt;  240 POP_BLOCK\n\n32     &gt;&gt;  242 LOAD_NAME               11 (print)\n          244 LOAD_CONST              12 (&#39;Looking at it now, it all seems so simple:&#39;)\n          246 LOAD_NAME                5 (accumulated)\n          248 CALL_FUNCTION            2\n          250 POP_TOP\n          252 LOAD_CONST              13 (None)\n          254 RETURN_VALUE\nNone</code></pre></div>\n<p>We managed to reverse engineer the above output into the following python source:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import sys\n\nx0 = 1338\nx1 = 413\nr = 3.5699\nxn = x0\nxk = x1\n\naccumulated = &#39;&#39;\n\n#user = input(&quot;I N P U T: &quot;)\n# user = bytes.fromhex(user)\n# if not user:\n#     print(&#39;Non-hex byte entered!&#39;)\n#     sys.exit()\n\n\nflag = b&#39;\\x8b*&lt;LH~\\xdc\\xc4\\xfc\\xad\\xff9\\xe8h\\x8d^\\xf2\\xc3\\xa7\\xc9&amp;\\x8f \\xeaE_\\xb0T\\x05\\xe5\\xff\\x9cD\\x9e\\x84\\x13k\\x0f~\\xb5\\x9cUm\\x08\\\\&#39;\n\nfor flagchar in flag:\n    xn = ((r * xn) * (1 - xn)) % x0\n    xn = int(xn * 100) % 255\n\n    #xk = ((xk * r) * (1 - xk)) % x1\n    #xk = (int(xk * 100)) % 255\n\n    flagbyte = chr(xn ^ flagchar)\n    #userbyte = chr(xk ^ userchar)\n\n    # if flagbyte != userbyte:\n    #     print(&#39;Still in the woods&#39;)\n    #     sys.exit()\n    # else:\n    accumulated += flagbyte\n\nprint(&#39;Looking at it now, it all seems so simple: {}&#39;.format(accumulated))</code></pre></div>\n<p>Which revealed:</p>\n<p><code class=\"language-text\">Looking at it now, it all seems so simple: flag{th3_m0nst3rs_turned_0ut_2_be_ju5t_tr33s}</code></p>\n<p>For more writeups visit <a href=\"https://github.com/ChalmersCTF/Writeups\">https://github.com/ChalmersCTF/Writeups</a> and don't forget to check out my friend's and fellow team member's website <a href=\"https://www.nindoda.com/\">https://www.nindoda.com/</a>.</p>","timeToRead":16,"excerpt":"This was fun little challenge that our team ( https://chalmersctf.se ) solved together. You are presented with the file   that contains the…","frontmatter":{"title":"UIUCTF - Are we out of the woods yet? Reversing 350p","slug":"uiuctf-are-we-out-of-the-woods-yet-2","date":"2017-04-30T00:00:00.000Z","categories":["CTF"],"tags":["CTF"],"template":"post"},"fields":{"nextTitle":"VolgaCTF - Bloody Feedback writeup","nextSlug":"/volgactf-bloody-feedback-writeup/","prevTitle":"SEC-T CTF - G1bs0n Writeup","prevSlug":"/sec-t-ctf-g1bs0n-writeup/","slug":"/uiuctf-are-we-out-of-the-woods-yet-2/","date":"2017-04-30T00:00:00.000Z"}}},"pageContext":{"slug":"/uiuctf-are-we-out-of-the-woods-yet-2/"}}